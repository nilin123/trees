import numpy as np
import numpy.random as rnd
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import matplotlib.lines as mlines
from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits.mplot3d.art3d import Line3DCollection
from matplotlib.collections import LineCollection
import sys
import pdb

#################################################################
#### Explore tree constructed using make_tree.py
#### author: Nilin
#################################################################

name=input("\n Load tree from file (exclude .npy): ")
[dims,paths]=np.load(name+".npy")

dim="3d"
if(dims[2]==1):
    dim="2d"
print("_"*100+"\n")
input("\n We've loaded a "+dim+" tree with "+str(dims[0]*dims[1]*dims[2])+" vertices.\n\n On the left will be a log-log plot of the volume of a ball as a function of radius (in the tree distance). \n The orange line is quadratic growth.\n On the right will be a drawing of the ball.\n\n Press ENTER to continue.")


#### N[DO(v)] is the set of neighbors of v.
#### DO=dictionary order
N=[[]]*dims[0]*dims[1]*dims[2]
DO=lambda v:int(v[0]*dims[1]*dims[2]+v[1]*dims[2]+v[2])

for path in paths:
    for t in range(1,len(path)):
        v,w=(path[t-1],path[t])
        N[DO(v)]=N[DO(v)]+[w]
        N[DO(w)]=N[DO(w)]+[v]

def growfrom(v):
    V=-1*np.ones(dims)
    S=[(dims[0]//2,dims[1]//2,dims[2]//2)]
    Spheres=[]
    Normals=[]
    t=0
    while(len(S)>0):
        Spheres=Spheres+[S]
        S_new=[]
        Nor=[]
        for v in S:
            for w in N[DO(v)]:
                if V[w]==-1:
                    V[w]=t
                    S_new=S_new+[w]
                Nor=Nor+[(v,w)]
        Normals=Normals+[Nor]
        S=S_new
        t=t+1

        R=len(Spheres)

        area=[len(S) for S in Spheres]
        volume=[0 for i in range(R)]
        vol=0
        for i in range(R):
            vol=vol+area[i]
            volume[i]=vol
    return [Spheres,Normals]

fig=plt.figure(figsize=(14,7))
ax=fig.add_subplot(121)

ax.plot(range(1,R),[x**2 for x in range(1,R)],color='#ffaa00')
ax.plot(range(1,R),volume[1:])
dot=ax.scatter([0],[1])
ax.set_xscale("log")
ax.set_yscale("log")



S0=Spheres[0][0]
Spheres=Spheres+[[]]
Normals=Normals+[[]]


if(dim=="3d"):
    ay=fig.add_subplot(122,projection='3d')
    ay.set_xlim(left=0,right=dims[0])
    ay.set_ylim(bottom=0,top=dims[1])
    ay.set_zlim(0,dims[2])
    sphereplot=ay.scatter([S0[0]],[S0[1]],[S0[2]],color='r')
else: 
    ay=fig.add_subplot(122)
    ay.set_xlim(left=0,right=dims[0])
    ay.set_ylim(bottom=0,top=dims[1])
    sphereplot=ay.scatter([S0[0]],[S0[1]],color='r')
    
speed=1
Spheres=Spheres+[[]]*speed
Normals=Normals+[[]]*speed
volume=volume+[[]]*speed
def animate(t):
    global dot,sphereplot
    S=Spheres[speed*t+1]

    if(dim=="3d"):
        sphereplot._offsets3d=([v[0] for v in S],[v[1] for v in S],[v[2] for v in S])

    if(t>0):
        Nor=[]
        for tt in range(speed*(t-1),speed*t):
            Nor=Nor+Normals[tt]
        if(dim=="3d"):
            lc=Line3DCollection(Nor)
            ay.add_collection3d(lc)
        else:
            lc=LineCollection([((x,y),(a,b)) for ((x,y,z),(a,b,c)) in Nor])
            ay.add_collection(lc)
            sphereplot.remove()
            sphereplot=ay.scatter([v[0] for v in S],[v[1] for v in S],color='r')

        dot.remove()
        dot=ax.scatter(speed*t,volume[speed*t],color='r')
    
ani=animation.FuncAnimation(fig,animate,interval=1,frames=R//speed+1,repeat=False)
plt.show()
